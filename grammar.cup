import java_cup.runtime.*;
// 1
terminal CLASS;                 //2
terminal AND;			//3
terminal ELSE;			//4
terminal IF;			//5
terminal WHILE;		        //6
terminal READ;			//7
terminal PRINT; 		//8
terminal PRINTLN;               //9
terminal RETURN;                //10
terminal OR;                    //11
terminal TIMES;                 //12
terminal PP;        	        //13
terminal MINUS;		        //14
terminal MM;			//15
terminal DIVIDE;                //16
terminal SEMICOLON;             //17
terminal LPAREN;     	        //18
terminal RPAREN;                //19
terminal LBRACE;      	        //20
terminal RBRACE;                //21
terminal LBRACK;		//22
terminal RBRACK;		//23
terminal PREFIXPLUS;            //24
terminal PREFIXMINUS;           //25
terminal ADD;                   //26
terminal EQUALS;                //27
terminal GTHAN;                 //28
terminal LTHAN;		        //29
terminal LEQ;			//30
terminal GEQ;			//31
terminal NOTEQ;		        //32
terminal TILDA;		        //33
terminal QUESTION;		//34
terminal COLON;		        //35
terminal ASSIGN;		//36
terminal COMMA;                 //37
terminal FINAL;                 //38
terminal VOID;                  //39
terminal String INT;	        //40
terminal String FLOAT;          //41
terminal String BOOL;           //42
terminal String CHAR;           //43

terminal TRUE;                  //44
terminal FALSE;                 //45

terminal String ID;             //46
terminal int INT_LIT;           //47
terminal double FLOAT_LIT;      //48
terminal String CHAR_LIT;       //49
terminal String STRING_LIT;     //50


/*** Part 2, Phase II ***/
non terminal Program program;

non terminal TypeID typeID;
non terminal String type;
non terminal FieldDec fieldDec;
non terminal MethodDec methodDec;

non terminal FieldDecList fieldDecls;

non terminal StmtList stmts;
non terminal Stmt stmt;

non terminal Expr name;
non terminal Expr nameExpr;
non terminal Expr unaryExpr;
non terminal Expr binExpr;
non terminal Expr ternExpr;
non terminal Expr operandExpr;

non terminal MemDeclarations methodDecls;
non terminal MemDeclarations memDeclarations;

non terminal ArgDeclList argDeclList;
non terminal ArgDecl argDecl;

non terminal ArgList args;
non terminal ReadList readList;
non terminal PrintList printList;
non terminal PrintList printlineList;

non terminal String opt_semi;
non terminal Expr opt_Expr;

/** PRED **/
precedence right QUESTION, COLON;
precedence left OR;
precedence left AND;
precedence left NOTEQ, EQUALS;
precedence left LTHAN, GTHAN, LEQ, GEQ;
precedence left ADD, MINUS;
precedence left TIMES, DIVIDE;
precedence right PREFIXPLUS, PREFIXMINUS, TILDA;
precedence left LPAREN, RPAREN, LBRACE, RBRACK;

/** GRAMMER **/

program ::= CLASS ID:i LBRACE memDeclarations:mds RBRACE 
                {: RESULT = new Program(i,mds); :}
                ;

memDeclarations ::= fieldDec:f memDeclarations:ms
                {: RESULT = ms.prepend(f); :}
                |
                methodDec:m methodDecls:mm
                {: RESULT = mm.prepend(m); :}
                |
                {: RESULT = new MemDeclarations(); :}
                ;

fieldDec ::=    typeID:ti LBRACK INT_LIT:n RBRACK SEMICOLON
                {: RESULT = new FieldDec(ti.getType(), ti.getID(), n); :}
                |
                FINAL typeID:ti SEMICOLON
                {: RESULT = new FieldDec("final", ti.getType(), ti.getID()); :}
                |
                FINAL typeID:ti opt_Expr:e SEMICOLON
                {: RESULT = new FieldDec("final", ti.getType(), ti.getID(), "=", e); :}
                |
                typeID:ti  SEMICOLON
                {: RESULT = new FieldDec("", ti.getType(), ti.getID()); :}
                |
                typeID:ti opt_Expr:e SEMICOLON
                {: RESULT = new FieldDec("", ti.getType(), ti.getID(),"=", e); :}
                ;

methodDecls ::= methodDec:m methodDecls:mm
                {: RESULT = mm.prepend(m); :}
                |
                {: RESULT = new MemDeclarations(); :}
                ;

fieldDecls ::= fieldDec:f fieldDecls:fs
                {: RESULT = fs.prepend(f); :}
                |
                {: RESULT = new FieldDecList(); :}
                ;


methodDec ::= VOID ID:i LPAREN argDeclList:as RPAREN LBRACE fieldDecls:fs stmts:ss RBRACE opt_semi:o
                {: RESULT = new MethodDec("void", i,as, fs,ss, o); :}
                |
                typeID:ti LPAREN argDeclList:as RPAREN LBRACE fieldDecls:fs stmts:ss RBRACE opt_semi:o
                {: RESULT = new MethodDec(ti.getType(),ti.getID(),as, fs, ss,o); :}
                ;

typeID ::= type:t ID:i
        {: RESULT = new TypeID(t,i); :}
        ;

// Argdecls
argDeclList ::= argDecl:a
                {: RESULT = new ArgDeclList(a); :}
                |
                argDecl:a COMMA argDeclList:aa
                {: RESULT = aa.prependArg(a); :}
                |
                {: RESULT = new ArgDeclList(); :}
                ;

argDecl ::= type:t ID:i LBRACK RBRACK
                {: RESULT = new ArgDecl(t, i, true); :}
                |
                type:t ID:i
                {: RESULT = new ArgDecl(t,i,false); :}
                ;


opt_Expr ::= ASSIGN ternExpr:e
                {: RESULT = e; :}
                ;

stmts ::= stmt:s stmts:ss
          {: RESULT = ss.prependStmt(s); :}
          |
          {: RESULT = new StmtList(); :}
          ;

stmt ::= name:n ASSIGN ternExpr:e SEMICOLON
        {: RESULT = new AssignStmt(n,e); :}
        |
        ID:i LPAREN args:aa RPAREN SEMICOLON
        {: RESULT = new CallStmt(i,aa); :}
        |
        IF LPAREN ternExpr:e RPAREN LBRACE fieldDecls:f  stmts:ss RBRACE
        {: RESULT = new IfStmt(e,f, ss); :}
        |
        IF LPAREN ternExpr:e RPAREN LBRACE fieldDecls:ff stmts:ss RBRACE ELSE LBRACE fieldDecls:fs stmts:tt RBRACE
        {: RESULT = new IfElseStmt(e,ff, ss, fs, tt); :}
        |
        WHILE LPAREN ternExpr:e RPAREN LBRACE stmts:ss RBRACE
        {: RESULT = new WhileStmt(e,ss); :}
        |
        name:n PP SEMICOLON
        {: RESULT = new IncDecStmt(n, "++"); :}
        |
        name:n MM SEMICOLON
        {: RESULT = new IncDecStmt(n,"--"); :}
        |
        RETURN SEMICOLON
        {: RESULT = new ReturnStmt(); :}
        |
        RETURN ternExpr:e SEMICOLON
        {: RESULT = new ReturnStmt(e); :}
        |
        READ LPAREN readList:r RPAREN SEMICOLON
        {: RESULT = new ReadStmt(r); :}
        |
        PRINT LPAREN printList:p RPAREN SEMICOLON
        {: RESULT = new PrintStmt(p); :}
        |
        PRINTLN LPAREN printlineList:p RPAREN SEMICOLON
        {: RESULT = new PrintlineStmt(p); :}
        |
        LBRACE fieldDecls:f stmts:ss RBRACE opt_semi:o
        {: RESULT = new BracedStmt(f,ss,o); :}
        ;

printlineList ::= printList:p
                {: RESULT = p; :}
                |
                ;

printList ::= ternExpr:e
            {: RESULT = new PrintList(e); :}
            |
            ternExpr:e COMMA printList:pl
            {: RESULT = pl.prependExpr(e); :}
            ;

readList ::= name:n
            {: RESULT = new ReadList(n); :}
            | 
            name:n COMMA readList:rl
            {: RESULT = rl.prependName(n); :}
            ;

args ::= ternExpr:e
        {: RESULT = new ArgList(e); :}
        |
        ternExpr:e COMMA args:aa
        {: RESULT = aa.prependArg(e); :}
        |
        {: RESULT = new ArgList(); :}
        ;

ternExpr ::= binExpr:b
                {: RESULT = b; :}
                |
                LPAREN ternExpr:a QUESTION ternExpr:b COLON ternExpr:c RPAREN
                {: RESULT = new TernExpr(a,b,c); :}
                ;

binExpr ::= unaryExpr:u
               {: RESULT = u; :}
               |
               ternExpr:e1 ADD ternExpr:e2
               {: RESULT = new BinExpr(e1, "+", e2); :}
               |
               ternExpr:e1 MINUS ternExpr:e2
               {: RESULT = new BinExpr(e1, "-", e2); :}
               |
               ternExpr:e1 TIMES ternExpr:e2
               {: RESULT = new BinExpr(e1, "*", e2); :}
               |
               ternExpr:e1 DIVIDE ternExpr:e2
               {: RESULT = new BinExpr(e1, "/", e2); :}
               |
               ternExpr:e1 LTHAN ternExpr:e2
               {: RESULT = new BinExpr(e1, "<", e2); :}
               |
               ternExpr:e1 GTHAN ternExpr:e2
               {: RESULT = new BinExpr(e1, ">", e2); :}
               |
               ternExpr:e1 LEQ ternExpr:e2
               {: RESULT = new BinExpr(e1, "<=", e2); :}
               |
               ternExpr:e1 GEQ ternExpr:e2
               {: RESULT = new BinExpr(e1, ">=", e2); :}
               |
               ternExpr:e1 NOTEQ ternExpr:e2
               {: RESULT = new BinExpr(e1, "<>", e2); :}
               |
               ternExpr:e1 OR ternExpr:e2
               {: RESULT = new BinExpr(e1, "||", e2); :}
               |
               ternExpr:e1 AND ternExpr:e2
               {: RESULT = new BinExpr(e1, "&&", e2); :}
               |
               ternExpr:e1 EQUALS ternExpr:e2
               {: RESULT = new BinExpr(e1, "==", e2); :}
               ;

unaryExpr ::= TILDA ternExpr:e
                {: RESULT = new UnaryExpr("~", e); :}
                |
                ADD ternExpr:e
                {: RESULT = new UnaryExpr("+", e); :}
                %prec PREFIXPLUS
                |
                MINUS ternExpr:e
                {: RESULT = new UnaryExpr("-", e); :} 
                %prec PREFIXMINUS
                |
                operandExpr:o
                {: RESULT = o; :}
                ;

operandExpr ::= INT_LIT:i
               {: RESULT = new OperandExpr(i); :}
               |
               FLOAT_LIT:f
               {: RESULT = new OperandExpr(f); :}
               |
               CHAR_LIT:c
               {: RESULT = new OperandExpr("char", c); :}
               |
               STRING_LIT:s
               {: RESULT = new OperandExpr("string", s); :}
               |
               TRUE:t
               {: RESULT = new OperandExpr("bool", "true"); :}
               |
               FALSE:f  
               {: RESULT = new OperandExpr("bool", "false"); :}
               |
               ID:i LPAREN args:a RPAREN
               {: RESULT = new CallExpr(i, a); :}
               |
               LPAREN type:t RPAREN ternExpr:e
               {: RESULT = new CastExpr(t,e); :}
               |
               LPAREN ternExpr:e RPAREN
               {: RESULT = new CastExpr(e); :}
               |
               nameExpr:n
               {: RESULT = n; :}
               ;


name ::= ID:i 
     {: RESULT = new Name(i); :}
     |
     ID:i LBRACK ternExpr:e RBRACK
     {: RESULT = new Name(i, e); :}
     ;

nameExpr ::= ID:i 
     {: RESULT = new NameExpr(i); :}
     |
     ID:i LBRACK ternExpr:e RBRACK
     {: RESULT = new NameExpr(i, e); :}
     ;


type ::= INT:i
        {: RESULT = i; :}
        |
        FLOAT:f
        {: RESULT = f; :}
        |
        CHAR:c
        {: RESULT = c; :}
        |
        BOOL:b
        {: RESULT = b; :}
        ;


opt_semi ::= SEMICOLON:s
                {: RESULT = ";"; :}
                |
                {: RESULT = ""; :} // NOTE that if left wihout this it will print "null"
                ;

